heat_template_version: 2014-10-16

description: >
  Openshift external DNS Server with Ansible.


parameters:

  key_name:
    description: >
      A pre-submitted SSH key to access the VM hosts
    type: string
    default: default
    constraints:
    - custom_constraint: nova.keypair

  image:
    description: >
      Select a base image to use for the bastion server
    type: string
    default: centos7-heat-agents
    constraints:
    - custom_constraint: glance.image

  flavor:
    description: >
      Define the hardware characteristics for the VMs: CPU, Memory, base disk
    type: string
    default: m1.small
    constraints:
    - custom_constraint: nova.flavor

  hostname:
    description: >
      The Infrastructure hostname portion of the FQDN
    type: string
    default: openshift-dns
    constraints:
    - allowed_pattern: '[a-z0-9\-]*'
      description: Hostname must contain only characters [a-z0-9\-].

  domain_name:
    description: >
      All VMs will be placed in this domain
    type: string
    default: openshift.labs.local

  ssh_user:
    description: >
      The user for SSH access to the VM hosts
    type: string
    default: centos

  dns_forwarder:
    type: string
    description: >
      A comma separated list of DNS nameserver IP addresses in your environment
      These will be configured into the OpenStack networks. They are the
      namservers that new OpenShift instances will use.
    default: 10.238.19.24; 8.8.8.8;

  extra_repository_urls:
    type: comma_delimited_list
    description: List of repository URLs which will be installed on each node.
    default: ''

  system_update:
    type: boolean
    default: true

  set_proxy:
    type: string
    description: proxy for external network
    default: ''

  fixed_network:
    description: >
      The name or ID of the admin and public network
    type: string
    constraints:
    - custom_constraint: neutron.network
    default: public

  fixed_subnet:
    description: >
      The name or ID of the admin and public IPv4 space
    type: string
    constraints:
    - custom_constraint: neutron.subnet
    default: public-float

#  internal_network:
#    description: >
#      The name or ID of the internal network
#    type: string
#    constraints:
#    - custom_constraint: neutron.network
#    default: tenant
#
#  internal_subnet:
#    description: >
#      The name or ID of the internal IPv4 space
#    type: string
#    constraints:
#    - custom_constraint: neutron.subnet
#    default: tenant-sub
#
  dns_security_group:
    description: >
      ID of the network access policies for the OpenShift master hosts
    type: string
    default: default

  # Networks to connect to or create
  external_network:
    type: string
    description: >
      The external network that provides floating IP addresses for the nodes
    constraints:
    - custom_constraint: neutron.network
    default: public

  timeout:
    description: Time to wait until the master setup is ready.
    type: number
    default: 10800

  ansible_public_key:
    description: >
      The SSH public key that Ansible will use to access master and node hosts
      This will be placed on each VM host in /root/.ssh/authorized_keys
    type: string
    default: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEowIBAAKCAQEApDxjQGKg62WlrQRtTP8u9Cl1HNF9IwT4xsBpJMeIz5yGz0F5
      7EsAu67/dIx56M73Br6ZoGiVg6wamj1WS2rT+XyujrE6/CirQ9u56exFGtyjRDE6
      RE+PHvEg2AS4CHvD8vk0kRjnXIt8mbPB/PZAUQbR4Zm5KojlzTKVLOfXvfMgZz8w
      TrtMhitaL0NGmOg30B8XlPojlXyekw4yC5umTwJZq/j8VVXwoWcSnfg7xGzyPykO
      LDjym1MSm4p0w8m+W0PT5MNTAFslntnNjuevsOtWGG9jLb6xO9e6nEmu4BgtO1t/
      jLCN5g99FTN7xojne7zrLnWsKYSfipV/RjKyeQIDAQABAoIBAHX5nv4wGxIdKT64
      sF8f67WeVi8GWNKgDqiOrLir0J35/WjByvgvBG7NjVlGU4glq5MftTFiDwzPwyhK
      qUNxkKVlp+p+azWZbTVIkCr1+soJ9gnVJtrNH60FXydtdFk7to1B8D3OWtvCoxWx
      58Zzic3qjTd2emmQfyrAjCH+xJ3/8b4FRfOv0Vwy4r9OoEqdBrdCQP40RiLBNVpX
      KpWeWV2OofUaSH7cjj5US4fdVyCNdWVLM5Jo69NvqTBKRwUg408QRhkaOuh0OPze
      0kCq4Bgvseidb+1r+aAShQKp8jugEInPDA6/fGd/DPQdJSlbWcPcTAPM23yGWMbq
      ofAPEAECgYEA1tCx2MdYIO5EaVE1zxz05bawRNpL0rsam7mxoM2mC7eSSvf6m0et
      l66K9TvJzwZXlxjA0JAzx3NvcpBvzwsU0uv1ZQ4Tb5+sQAtzzsnPF5ET2iv3JquM
      I2j1SYJ0oKwdqdTWdD8h3Fqz3v1KDDu7GYrEFVDw/uj0jBBMskm8XHkCgYEAw7k3
      +PP/8zq9Ght86y38Tsk+7L3cUvUWJXrloq1WvFhY46GFEpg0QjPbKfXkR3BpJLv7
      96XF6eTFnvH3s6PsbsxjoQdEeSqUsGt4DcU505fJYK2bDWJva48ukQacCMMUqcrw
      LrBAl/WKkODf1LTGuqV/wuGNy2ihUWn2iBLHhgECgYEAusHrrMz6iH69yVZKUssY
      +tGOg/3JZ+c1JegWTvgbgRpSvIzFOtThTfr4YmZdeHhKFFn34BtOePuaC98Y5cb7
      jriHuxi2uxf1uCR8xW5cdl+yA76ve9Yu2uY4QnWBkeKxU2JwI9ZzSNEuihJpmyMe
      8gDborChJO1BFrhhBavnb/kCgYBVgh4KDc/Mm+Tx+wBgXv7UDOgI1gnj1F+QkFiy
      8bfrIU30ZSSWMxjhs3YUpvDMpTfKbLZwQ2RsAx6zilMFkKBC59i/CUXJCelcChex
      LHFPGAlKy43qEw9KlotpoNGaol/srlSwkSAnQ4b+NMCVVUVdVeCza4dfTp7ryreC
      S3IQAQKBgAc8cM1N3JgYT0mTXmMxZrqmo9Mq0paD/4I6sFT9OB8Iw56QUftHYO3a
      3NuvL7sy6CcfplHtwt5NnzMu4wT8wuOBGjiLQCCgAsLCl5WlfCs2UmRzwFvFAbst
      XLVQg+s6Zpv/GANO18ixyV/bbI2L7D7xL1VEji842D2QlAaFLDB1
      -----END RSA PRIVATE KEY-----


  ansible_private_key:
    description: >
      The private key that Ansible will use to access master and node hosts
      This file will be placed on the bastion host and protected
    type: string
    default: |
      ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCkPGNAYqDrZaWtBG1M/y70KXUc0X0jBPjGwGkkx4jPnIbPQXnsSwC7rv90jHnozvcGvpmgaJWDrBqaPVZLatP5fK6OsTr8KKtD27np7EUa3KNEMTpET48e8SDYBLgIe8Py+TSRGOdci3yZs8H89kBRBtHhmbkqiOXNMpUs59e98yBnPzBOu0yGK1ovQ0aY6DfQHxeU+iOVfJ6TDjILm6ZPAlmr+PxVVfChZxKd+DvEbPI/KQ4sOPKbUxKbinTDyb5bQ9Pkw1MAWyWe2c2O56+w61YYb2MtvrE717qcSa7gGC07W3+MsI3mD30VM3vGiOd7vOsudawphJ+KlX9GMrJ5 ubuntu@kolla22

  ca_cert:
    type: string
    description: Certificate Authority Certificate to be added to trust chain
    default: |
      -----BEGIN CERTIFICATE-----
      MIID9TCCAt2gAwIBAgIJAI0NUxl/BtdzMA0GCSqGSIb3DQEBCwUAMIGQMQswCQYD
      VQQGEwJDTjEQMA4GA1UECAwHQmVpamluZzEQMA4GA1UEBwwHQmVpamluZzEWMBQG
      A1UECgwNd3d3LnBjaXRjLmNvbTEMMAoGA1UECwwDRVJQMRMwEQYDVQQDDAp4aWFv
      cnVpZ3VvMSIwIAYJKoZIhvcNAQkBFhNzZWFuLnhpYW9AcGNpdGMuY29tMB4XDTE3
      MDYwMjIzMTkzMFoXDTI3MDUzMTIzMTkzMFowgZAxCzAJBgNVBAYTAkNOMRAwDgYD
      VQQIDAdCZWlqaW5nMRAwDgYDVQQHDAdCZWlqaW5nMRYwFAYDVQQKDA13d3cucGNp
      dGMuY29tMQwwCgYDVQQLDANFUlAxEzARBgNVBAMMCnhpYW9ydWlndW8xIjAgBgkq
      hkiG9w0BCQEWE3NlYW4ueGlhb0BwY2l0Yy5jb20wggEiMA0GCSqGSIb3DQEBAQUA
      A4IBDwAwggEKAoIBAQCpgIqDxVYRaBEFMoE0A5BunGhYSbA/PkVdbt2xQVbve/z7
      UiD7JFEs02EYWaVC6kzn9ydarc4NTimDEGkaT7wZGkWP7jEqc6AlxrIFTWD7x7vj
      t3KrZ5OK4obRjNkYt2qN13GPZYnqKo3BBhrwjy1GmbemX/MTMxFcMY8tCVKuX9Fq
      saPbi3AMCu1l3Gas4fe7bdGi88K7clVCY0ESLAqucH0ckBy7N4vEo9gNxOdQE4LU
      znGaIIXV4EUronw+Y0te3Toj30XKLbjYrCzY+6LPDUilfSGqYdOHqS4ZT1sXG9+Q
      Pbxo6/HLRLS0MSY1UcKUTxT1rLBD9VAIPh47xGyxAgMBAAGjUDBOMB0GA1UdDgQW
      BBQcIcAMidUr0sRqh0SMl0IzzAAuJjAfBgNVHSMEGDAWgBQcIcAMidUr0sRqh0SM
      l0IzzAAuJjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQCbc6F64toe
      MRlOSycv2aRxYrE3UrKnJYRc8bEqPa9LYSWXao8CMooLCHFrBNjW/3Hg4pdm+EEd
      CWROreH92yPpzMrjrpnJoVvUaenHNJEhvW78EZ5iwX++dTn3gjHmwcrMcGDSE6BQ
      c9TGl8ME3ZxJElOFxxh7uWTbi27BAO7yTYV5dxDLobIyhog6/BMz5pU5zMbcX8lS
      /TPREAPBYhoNawl8DGjks5vaaEmU+42koHwIOfjp2Zns3ol904AIUDdfr6Mt4aI9
      55N20+m4h35n4E6OiFHjcUju/8hnG9V6ADTy3hkpqCcwrPJHacwtYcnFaWxqsSOK
      flwj4Wm7RAqQ
      -----END CERTIFICATE-----



resources:

  # Create a network connection on the internal communications network
  port:
    type: OS::Neutron::Port
    properties:
      security_groups:
      - {get_param: dns_security_group}
      network: {get_param: fixed_network}
      fixed_ips:
      - subnet: {get_param: fixed_subnet}
      replacement_policy: AUTO

# A VM to provide host based orchestration and other sub-services
  host:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "HOST.DOMAIN"
          params:
            HOST: {get_param: hostname}
            DOMAIN: {get_param: domain_name}
      admin_user: {get_param: ssh_user}
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
#      security_groups:
#      - {get_param: dns_security_group}
      networks:
      - port: {get_resource: port}
#      - network: {get_param: external_network}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: init}
      software_config_transport: POLL_SERVER_HEAT

  # Collect the results from a set of resources
  init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: set_hostname}
      - config: {get_resource: included_files}
      - config: {get_resource: update_ca_cert}
      - config: {get_resource: set_extra_repos}
#      - config: {get_resource: set_extra_docker_repos}
      - config: {get_resource: host_update}
        type: multipart
      - config: {get_param: set_proxy}
      - config: {get_resource: dns_server_boot}


  # Install the DNS server and retrieve the Ansible playbooks for OpenShift
  dns_server_boot:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          params:
            $DOMAIN: {get_param: domain_name}
            $FORWARDER: {get_param: dns_forwarder}
          template: {get_file: fragments/dns-server-boot.sh}

  # Compose the FQDN for cloud-init
  set_hostname:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        hostname: {get_param: hostname}
        fqdn:
          str_replace:
            template: "HOST.DOMAIN"
            params:
              HOST: {get_param: hostname}
              DOMAIN: {get_param: domain_name}

  # Place host configuration files via cloud-init
  included_files:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /usr/local/bin/retry
          permissions: 0755
          content: {get_file: fragments/retry.sh}
        - path: /usr/local/bin/merge_dict
          permissions: 0755
          content: {get_file: fragments/merge_dict.py}
        - path: /usr/local/share/openshift-on-openstack/common_functions.sh
          permissions: 0755
          content:
            str_replace:
              params:
                $WC_NOTIFY: { get_attr: ['wait_handle', 'curl_cli'] }
              template: {get_file: fragments/common_functions.sh}
        - path: /root/.ssh/id_rsa
          permissions: 0600
#          content: {get_file: fragments/id_rsa}
          content: {get_param: ansible_private_key}
        - path: /root/.ssh/id_rsa.pub
          permissions: 0600
#          content: {get_file: fragments/id_rsa.pub}
          content: {get_param: ansible_public_key}
        - path: /etc/pki/ca-trust/source/anchors/ca.crt
          permissions: 0600
          content: {get_param: ca_cert}
        ssh_authorized_keys:
        - {get_param: ansible_public_key}

  # Add CA Cert to trust chain
  update_ca_cert:
    type: OS::Heat::SoftwareConfig
    properties:
      config: {get_file: fragments/ca_cert.sh}

  # Enable any extra repositories
  set_extra_repos:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $REPOLIST:
              list_join:
                - " "
                - {get_param: extra_repository_urls}
          template: {get_file: fragments/set-extra-repos.sh}

  # Make sure the host software is current
  host_update:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $SYSTEM_UPDATE: {get_param: system_update}
          template: {get_file: fragments/host-update.sh}

  add_dns_record:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: key_name
#      - name: key_secret
      - name: dns_server
      - name: dns_zone
      - name: dns_record
      - name: dns_record_ip
      outputs:
      - name: result
      config: {get_file: fragments/add_dns_resource_record.sh}

  #Add dns Resource Record
  deployment_add_dns_record:
    depends_on: wait_condition
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: add_dns_record
      server:
        get_resource: host
      input_values:
        key_name: {get_param: domain_name}
#        key_secret: {get_param: dns_update_key}
        dns_server: {get_attr: [host, first_address]}
        dns_zone: {get_param: domain_name}
        dns_record: {get_param: hostname}
        dns_record_ip: {get_attr: [host, first_address]}
      signal_transport: HEAT_SIGNAL

  # Wait for master_boot (cloud-init) to complete or time out
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      timeout: {get_param: timeout}

  # This is passed to bastion_init cloud-init script as a curl CLI command
  # When the cloud-init process ends it queries the URL with
  # a message which ends the wait and returns the value
  wait_handle:
    type: OS::Heat::WaitConditionHandle

outputs:
  instance_ip:
    description: Instance private IP (used by other nodes for DNS queries).
    value: {get_attr: [host, first_address]}


