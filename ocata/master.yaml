heat_template_version: 2014-10-16


description: >
  OpenShift Master


parameters:

  # What version of OpenShift Container Platform to install
  # This value is used to select the RPM repo for the OCP release to install
  ocp_version:
    type: string
    description: >
      The version of OpenShift Container Platform to deploy
    default: 1.5.2

  key_name:
    description: >
      A pre-submitted SSH key to access the VM hosts
    type: string
    constraints:
    - custom_constraint: nova.keypair
    default: default

  image:
    description: >
      Select a base image to use for the master servers
    type: string
    constraints:
    - custom_constraint: glance.image
    default: centos7-heat-agents

  flavor:
    description: >
      Define the hardware characteristics for the VMs: CPU, Memory, base disk
    type: string
    constraints:
    - custom_constraint: nova.flavor
    default: m1.medium

  docker_volume_size:
    description: >
      size of a cinder volume in GB to allocate to docker for container/image
      storage
    type: number
    default: 25

  hostname:
    description: >
      A string to identify master hostnames.
    type: string
    default: master
    constraints:
    - allowed_pattern: '[a-z0-9\-]*'
      description: Hostname must contain only characters [a-z0-9\-].

  domain_name:
    description: >
      The DNS domain suffix. All VMs will be placed in this domain
    type: string
    default: openshift.labs.local

  ansible_public_key:
    description: >
      The SSH public key that Ansible will use to access master and node hosts
      This will be placed on each VM host in /root/.ssh/authorized_keys
    type: string
    default: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEowIBAAKCAQEApDxjQGKg62WlrQRtTP8u9Cl1HNF9IwT4xsBpJMeIz5yGz0F5
      7EsAu67/dIx56M73Br6ZoGiVg6wamj1WS2rT+XyujrE6/CirQ9u56exFGtyjRDE6
      RE+PHvEg2AS4CHvD8vk0kRjnXIt8mbPB/PZAUQbR4Zm5KojlzTKVLOfXvfMgZz8w
      TrtMhitaL0NGmOg30B8XlPojlXyekw4yC5umTwJZq/j8VVXwoWcSnfg7xGzyPykO
      LDjym1MSm4p0w8m+W0PT5MNTAFslntnNjuevsOtWGG9jLb6xO9e6nEmu4BgtO1t/
      jLCN5g99FTN7xojne7zrLnWsKYSfipV/RjKyeQIDAQABAoIBAHX5nv4wGxIdKT64
      sF8f67WeVi8GWNKgDqiOrLir0J35/WjByvgvBG7NjVlGU4glq5MftTFiDwzPwyhK
      qUNxkKVlp+p+azWZbTVIkCr1+soJ9gnVJtrNH60FXydtdFk7to1B8D3OWtvCoxWx
      58Zzic3qjTd2emmQfyrAjCH+xJ3/8b4FRfOv0Vwy4r9OoEqdBrdCQP40RiLBNVpX
      KpWeWV2OofUaSH7cjj5US4fdVyCNdWVLM5Jo69NvqTBKRwUg408QRhkaOuh0OPze
      0kCq4Bgvseidb+1r+aAShQKp8jugEInPDA6/fGd/DPQdJSlbWcPcTAPM23yGWMbq
      ofAPEAECgYEA1tCx2MdYIO5EaVE1zxz05bawRNpL0rsam7mxoM2mC7eSSvf6m0et
      l66K9TvJzwZXlxjA0JAzx3NvcpBvzwsU0uv1ZQ4Tb5+sQAtzzsnPF5ET2iv3JquM
      I2j1SYJ0oKwdqdTWdD8h3Fqz3v1KDDu7GYrEFVDw/uj0jBBMskm8XHkCgYEAw7k3
      +PP/8zq9Ght86y38Tsk+7L3cUvUWJXrloq1WvFhY46GFEpg0QjPbKfXkR3BpJLv7
      96XF6eTFnvH3s6PsbsxjoQdEeSqUsGt4DcU505fJYK2bDWJva48ukQacCMMUqcrw
      LrBAl/WKkODf1LTGuqV/wuGNy2ihUWn2iBLHhgECgYEAusHrrMz6iH69yVZKUssY
      +tGOg/3JZ+c1JegWTvgbgRpSvIzFOtThTfr4YmZdeHhKFFn34BtOePuaC98Y5cb7
      jriHuxi2uxf1uCR8xW5cdl+yA76ve9Yu2uY4QnWBkeKxU2JwI9ZzSNEuihJpmyMe
      8gDborChJO1BFrhhBavnb/kCgYBVgh4KDc/Mm+Tx+wBgXv7UDOgI1gnj1F+QkFiy
      8bfrIU30ZSSWMxjhs3YUpvDMpTfKbLZwQ2RsAx6zilMFkKBC59i/CUXJCelcChex
      LHFPGAlKy43qEw9KlotpoNGaol/srlSwkSAnQ4b+NMCVVUVdVeCza4dfTp7ryreC
      S3IQAQKBgAc8cM1N3JgYT0mTXmMxZrqmo9Mq0paD/4I6sFT9OB8Iw56QUftHYO3a
      3NuvL7sy6CcfplHtwt5NnzMu4wT8wuOBGjiLQCCgAsLCl5WlfCs2UmRzwFvFAbst
      XLVQg+s6Zpv/GANO18ixyV/bbI2L7D7xL1VEji842D2QlAaFLDB1
      -----END RSA PRIVATE KEY-----

  ssh_user:
    description: >
      The user for SSH access to the VM hosts
    type: string
    default: centos

  timeout:
    description: Time to wait until the master setup is ready.
    type: number
    default: 10800

  external_network:
    description: >
      The name of the inbound access network
    type: string
    default: public
    constraints:
    - custom_constraint: neutron.network

#  dns_node:
#    description: >
#      The hostname of the bastion node in the deployment
#    type: string
#    default: dns.openshift.labs.local

  bastion_node:
    description: >
      The hostname of the bastion node in the deployment
    type: string
    default: bastion.openshift.labs.local

  fixed_network:
    description: >
      The name or ID of the admin and public network
    type: string
    constraints:
    - custom_constraint: neutron.network
    default: public

  fixed_subnet:
    description: >
      The name or ID of the admin and public IPv4 space
    type: string
    constraints:
    - custom_constraint: neutron.subnet
    default: public-float

  internal_network:
    description: >
      The name or ID of the internal network
    type: string
    constraints:
    - custom_constraint: neutron.network
    default: tenant

  internal_subnet:
    description: >
      The name or ID of the internal IPv4 space
    type: string
    constraints:
    - custom_constraint: neutron.subnet
    default: tenant-sub

  ldap_url:
    description: >
      The LDAP url for access to the LDAP service (redundant? ML)
    type: string
    default: ''

  ldap_preferred_username:
    description: >
      What field to use to look up and identify users in the database
    type: string
    default: 'uid'

  ldap_bind_dn:
    description: >
      LDAP service access user identifier
    type: string
    default: ''

  ldap_bind_password:
    description: >
      LDAP service access password
    type: string
    default: ''

  ldap_ca:
    description: >
      The Certificate Authority file to confirm SSL encryption security
    type: string
    default: ''

  ldap_insecure:
    description: >
      Toggle SSL encryption for LDAP communications
    type: string
    default: false

  master_server_group:
    description: >
      ID of a server group containing all of the master hosts
    type: string
    default: ''

  master_security_group:
    description: >
      ID of the network access policies for the OpenShift master hosts
    type: string
    default: default

  system_update:
    type: boolean
    default: true

  extra_repository_urls:
    type: comma_delimited_list
    description: List of repository URLs which will be installed on each node.
    default: ''

  extra_docker_repository_urls:
    type: comma_delimited_list
    description: List of docker repository URLs which will be installed on each node, if a repo is insecure use '#insecure' suffix.
    default: ''

#  dns_servers:
#    type: comma_delimited_list
#    description: address of dns nameservers reachable in your environment
#    default: 10.238.19.24, 8.8.8.8

  dns_server:
    type: string
    description: address of dns nameservers reachable in your environment
    default: 8.8.8.8

  ca_cert:
    type: string
    description: Certificate Authority Certificate to be added to trust chain
    default: |
      -----BEGIN CERTIFICATE-----
      MIID9TCCAt2gAwIBAgIJAI0NUxl/BtdzMA0GCSqGSIb3DQEBCwUAMIGQMQswCQYD
      VQQGEwJDTjEQMA4GA1UECAwHQmVpamluZzEQMA4GA1UEBwwHQmVpamluZzEWMBQG
      A1UECgwNd3d3LnBjaXRjLmNvbTEMMAoGA1UECwwDRVJQMRMwEQYDVQQDDAp4aWFv
      cnVpZ3VvMSIwIAYJKoZIhvcNAQkBFhNzZWFuLnhpYW9AcGNpdGMuY29tMB4XDTE3
      MDYwMjIzMTkzMFoXDTI3MDUzMTIzMTkzMFowgZAxCzAJBgNVBAYTAkNOMRAwDgYD
      VQQIDAdCZWlqaW5nMRAwDgYDVQQHDAdCZWlqaW5nMRYwFAYDVQQKDA13d3cucGNp
      dGMuY29tMQwwCgYDVQQLDANFUlAxEzARBgNVBAMMCnhpYW9ydWlndW8xIjAgBgkq
      hkiG9w0BCQEWE3NlYW4ueGlhb0BwY2l0Yy5jb20wggEiMA0GCSqGSIb3DQEBAQUA
      A4IBDwAwggEKAoIBAQCpgIqDxVYRaBEFMoE0A5BunGhYSbA/PkVdbt2xQVbve/z7
      UiD7JFEs02EYWaVC6kzn9ydarc4NTimDEGkaT7wZGkWP7jEqc6AlxrIFTWD7x7vj
      t3KrZ5OK4obRjNkYt2qN13GPZYnqKo3BBhrwjy1GmbemX/MTMxFcMY8tCVKuX9Fq
      saPbi3AMCu1l3Gas4fe7bdGi88K7clVCY0ESLAqucH0ckBy7N4vEo9gNxOdQE4LU
      znGaIIXV4EUronw+Y0te3Toj30XKLbjYrCzY+6LPDUilfSGqYdOHqS4ZT1sXG9+Q
      Pbxo6/HLRLS0MSY1UcKUTxT1rLBD9VAIPh47xGyxAgMBAAGjUDBOMB0GA1UdDgQW
      BBQcIcAMidUr0sRqh0SMl0IzzAAuJjAfBgNVHSMEGDAWgBQcIcAMidUr0sRqh0SM
      l0IzzAAuJjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQCbc6F64toe
      MRlOSycv2aRxYrE3UrKnJYRc8bEqPa9LYSWXao8CMooLCHFrBNjW/3Hg4pdm+EEd
      CWROreH92yPpzMrjrpnJoVvUaenHNJEhvW78EZ5iwX++dTn3gjHmwcrMcGDSE6BQ
      c9TGl8ME3ZxJElOFxxh7uWTbi27BAO7yTYV5dxDLobIyhog6/BMz5pU5zMbcX8lS
      /TPREAPBYhoNawl8DGjks5vaaEmU+42koHwIOfjp2Zns3ol904AIUDdfr6Mt4aI9
      55N20+m4h35n4E6OiFHjcUju/8hnG9V6ADTy3hkpqCcwrPJHacwtYcnFaWxqsSOK
      flwj4Wm7RAqQ
      -----END CERTIFICATE-----

  set_proxy:
    type: string
    description: proxy for external network

  dns_update_key:
    type: string
    hidden: true

resources:

  # Create a network connection on the internal communications network
  port:
    type: OS::Neutron::Port
    properties:
      security_groups:
      - {get_param: master_security_group}
      network: {get_param: fixed_network}
      fixed_ips:
      - subnet: {get_param: fixed_subnet}
      replacement_policy: AUTO

  # Create a network connection on the internal communications network
  internal_port:
    type: OOShift::ContainerPort
    properties:
      security_group: {get_param: master_security_group}
      network: {get_param: internal_network}
      subnet: {get_param: internal_subnet}

  # Create the VM instance to host the OpenShift master service
  host:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "HOST.DOMAIN"
          params:
            HOST: {get_param: hostname}
            DOMAIN: {get_param: domain_name}
      admin_user: {get_param: ssh_user}
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
      - port: {get_resource: port}
      - port: {get_attr: [internal_port, port]}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: init}
      scheduler_hints:
        group: {get_param: master_server_group}
      software_config_transport: POLL_SERVER_HEAT

  # Create space for Docker containers and images
  docker_volume:
    type: OS::Cinder::Volume
    properties:
      description: Master Volume
      size: {get_param: docker_volume_size}

  # Bind the docker storage to the VM
  docker_volume_attach:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: {get_resource: host}
      volume_id: {get_resource: docker_volume}

  # Provide access to the Master on the public network
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_resource: port}

  # Compose configuration data into a single structure
  init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: set_hostname}
      - config: {get_resource: included_files}
      - config: {get_param: set_proxy}
      - config: {get_resource: update_ca_cert}
      - config: {get_resource: set_extra_repos}
      - config: {get_resource: set_extra_docker_repos}
      - config: {get_resource: host_update}
      - config: {get_resource: add_dns_record}
      - config: {get_resource: master_boot}

  # Compose the short hostname and fully qualified domain name for the new host
  set_hostname:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        hostname: {get_param: hostname}
        fqdn:
          str_replace:
            template: "HOST.DOMAIN"
            params:
              HOST: {get_param: hostname}
              DOMAIN: {get_param: domain_name}

  # Compile a set of standard configuration files to provide identity and access
  included_files:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /usr/local/share/openshift-on-openstack/common_functions.sh
          permissions: 0755
          content:
            str_replace:
              params:
                $WC_NOTIFY: { get_attr: ['wait_handle', 'curl_cli'] }
              template: {get_file: fragments/common_functions.sh}
        - path: /usr/local/share/openshift-on-openstack/common_openshift_functions.sh
          permissions: 0755
          content: {get_file: fragments/common_openshift_functions.sh}
        - path: /usr/local/bin/retry
          permissions: 0755
          content: {get_file: fragments/retry.sh}
        - path: /usr/local/bin/update_dns
          permissions: 0755
          content: {get_file: fragments/update_dns.py}
        - path: /etc/sysconfig/network-scripts/ifcfg-eth1
          content:
            str_replace:
              params:
                $IFNAME: eth1
              template: {get_file: fragments/ifcfg-eth}
        - path: /etc/pki/ca-trust/source/anchors/ca.crt
          permissions: 0600
          content: {get_param: ca_cert}
        ssh_authorized_keys:
        - {get_param: ansible_public_key}

  # Add CA Cert to trust chain
  update_ca_cert:
    type: OS::Heat::SoftwareConfig
    properties:
      config: {get_file: fragments/ca_cert.sh}

  # Enable any extra repositories
  set_extra_repos:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $REPOLIST:
              list_join:
                - " "
                - {get_param: extra_repository_urls}
          template: {get_file: fragments/set-extra-repos.sh}

  set_extra_docker_repos:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $REPOLIST:
              list_join:
                - " "
                - {get_param: extra_docker_repository_urls}
          template: {get_file: fragments/set-extra-docker-repos.sh}

  # Insure that the host software is current
  host_update:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $SYSTEM_UPDATE: {get_param: system_update}
          template: {get_file: fragments/host-update.sh}

  add_dns_record:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            '%ZONE%': {get_param: domain_name}
            '%DNS_SERVER%': {get_param: dns_server}
            '%DNS_UPDATE_KEY%': {get_param: dns_update_key}
            '%IP_ADDRESS%': {get_attr: [port, fixed_ips, 0, ip_address]}
          template: {get_file: fragments/add_dns_record.sh}

#  add_dns_record:
#    type: OS::Heat::SoftwareConfig
#    properties:
#      group: script
#      inputs:
#      - name: key_name
##      - name: key_secret
#      - name: dns_server
#      - name: dns_zone
#      - name: dns_record
#      - name: dns_record_ip
#      outputs:
#      - name: result
#      config: {get_file: fragments/add_dns_resource_record.sh}

  # Prepare the host to run Docker and Ansible for OpenShift install and config
  master_boot:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          params:
            $DOCKER_VOLUME_ID: {get_resource: docker_volume}
          template: {get_file: fragments/master-boot.sh}

  # Add a node's IP/Name mapping to DNS
  node_add:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: node_etc_host
      - name: node_hostname
      - name: node_type
      outputs:
      - name: result
      config: {get_file: fragments/bastion-node-add.sh}

#  #Add dns Resource Record
#  deployment_add_dns_record:
#    depends_on: wait_condition
#    type: OS::Heat::SoftwareDeployment
#    properties:
#      config:
#        get_resource: add_dns_record
#      server:
#        get_param: dns_node
#      input_values:
#        key_name: {get_param: domain_name}
##        key_secret: {get_param: dns_update_key}
#        dns_server: {get_param: dns_server}
#        dns_zone: {get_param: domain_name}
#        dns_record: {get_param: hostname}
#        dns_record_ip: {get_attr: [port, fixed_ips, 0, ip_address]}
#      signal_transport: HEAT_SIGNAL


  # Add the hostname and address of the bastion host to the master host
  deployment_bastion_node_add:
    depends_on: wait_condition
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: node_add
      server:
        get_param: bastion_node
      input_values:
        node_type: master
        node_hostname:
          str_replace:
            template: "HOST.DOMAIN"
            params:
              HOST: {get_param: hostname}
              DOMAIN: {get_param: domain_name}
        node_etc_host:
          str_replace:
              template: "IP HOST.DOMAIN HOST #openshift"
              params:
                IP: {get_attr: [port, fixed_ips, 0, ip_address]}
                HOST: {get_param: hostname}
                DOMAIN: {get_param: domain_name}
      signal_transport: HEAT_SIGNAL

  node_cleanup:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: node_name
      - name: node_type
      - name: ssh_user
        default: {get_param: ssh_user}
      outputs:
      - name: result
      config: {get_file: fragments/bastion-node-cleanup.sh}

  # activation hook for removing the node from DNS and from the Kubernetes
  # cluster
  deployment_bastion_node_cleanup:
    depends_on: [host, wait_condition]
    type: OS::Heat::SoftwareDeployment
    properties:
      actions: ['DELETE']
      input_values:
        node_type: master
        node_name:
          str_replace:
            template: "HOST.DOMAIN"
            params:
              HOST: {get_param: hostname}
              DOMAIN: {get_param: domain_name}
      config:
        get_resource: node_cleanup
      server:
        get_param: bastion_node
      signal_transport: HEAT_SIGNAL

  # Wait for master_boot (cloud-init) to complete or time out
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      timeout: {get_param: timeout}

  # This provides a curl CLI string to the cloud-init script which is queried
  # with a status at the end of of the cloud-init process
  wait_handle:
    type: OS::Heat::WaitConditionHandle

outputs:
  console_url:
    description: Compose the access URL for the OpenShift web UI
    value:
      str_replace:
        params:
          HOSTNAME: {get_param: hostname}
          DOMAINNAME: {get_param: domain_name}
        template: "https://HOSTNAME.DOMAINNAME:8443/console/"
  api_url:
    description: Compose the access URL for the OpenShift REST API
    value:
      str_replace:
        params:
          HOSTNAME: {get_param: hostname}
          DOMAINNAME: {get_param: domain_name}
        template: "https://HOSTNAME.DOMAINNAME:8443/"
  wc_data:
    description: Syncronization data
    value: { get_attr: ['wait_condition', 'data'] }
  hostname:
    description: The actual short name for the host
    value: {get_param: hostname}
  host:
    description: A reference to the master host identifier
    value: {get_resource: host}
  ip_address:
    description: IP address of the node
    value: {get_attr: [floating_ip, floating_ip_address]}
